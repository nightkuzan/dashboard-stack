services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dashboard-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dashboard}
      POSTGRES_USER: ${POSTGRES_USER:-dashboard}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dashboard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dashboard}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Strapi Backend
  backend:
    build:
      context: ../dashboard-backend
      dockerfile: Dockerfile
    container_name: dashboard-backend
    environment:
      HOST: 0.0.0.0
      PORT: 1337
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${POSTGRES_DB:-dashboard}
      DATABASE_USERNAME: ${POSTGRES_USER:-dashboard}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_SSL: ${DATABASE_SSL:-false}
      NODE_ENV: production
    ports:
      - "1337:1337"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dashboard-network
    volumes:
      - backend_uploads:/app/public/uploads

  # Vue.js Frontend
  frontend:
    build:
      context: ../dashboard-client
      dockerfile: Dockerfile
      args:
        VITE_APP_BASEURL: ${FRONTEND_API_URL:-http://backend:1337}
    container_name: dashboard-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - dashboard-network

volumes:
  postgres_data:
  backend_uploads:

networks:
  dashboard-network:
    driver: bridge
